//+------------------------------------------------------------------+
//|                                                       HedgeEA.mq5|
//|                        Generated by MQL5 Wizard version 1.00     |
//|                                      https://www.mql5.com        |
//+------------------------------------------------------------------+
input double HedgeStartPrice = -3000.0; // Hedge start price, user-defined parameter
datetime lastCheckTime = 0; // Variable to store the time of the last checked candle

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Initialization code
   lastCheckTime = iTime(Symbol(), PERIOD_M5, 0); // Initialize with the time of the last 5-minute candle
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   // Cleanup code
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   datetime currentTime = iTime(Symbol(), PERIOD_M5, 0); // Get the time of the last 5-minute candle
   if (currentTime != lastCheckTime)
     {
      lastCheckTime = currentTime; // Update the last check time

      // Check spreads
      if(CheckSpreads() && Symbol() == "GBPJPY#")
        {
         // Check and get all open positions
         for(int i = 0; i < PositionsTotal(); i++)
           {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelect(ticket))
              {
               string originalSymbol = PositionGetString(POSITION_SYMBOL);
               double floatingProfit = PositionGetDouble(POSITION_PROFIT);
               int originalType = PositionGetInteger(POSITION_TYPE);
               ulong magicNumber = PositionGetInteger(POSITION_MAGIC);
               double originalLots = PositionGetDouble(POSITION_VOLUME);

               // Identify OriginalOrder
               if(floatingProfit < HedgeStartPrice)
                 {
                  // Check if the order is already hedged
                  if(!IsHedged(originalSymbol, ticket))
                    {
                     // Send hedge orders
                     SendHedgeOrder(originalSymbol, originalType, originalLots, ticket);
                    }
                 }
              }
           }
        }
     }
  }
//+------------------------------------------------------------------+
//| Check if the order is already hedged                             |
//+------------------------------------------------------------------+
bool IsHedged(string originalSymbol, ulong originalTicket)
  {
   for(int i = 0; i < PositionsTotal(); i++)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelect(ticket))
        {
         string hedgeSymbol = PositionGetString(POSITION_SYMBOL);
         string hedgeComment = PositionGetString(POSITION_COMMENT);
         if(hedgeSymbol == originalSymbol && hedgeComment == "Hedge for ticket " + IntegerToString(originalTicket))
           {
            return true;
           }
        }
     }
   return false;
  }
//+------------------------------------------------------------------+
//| Send hedge order                                                 |
//+------------------------------------------------------------------+
void SendHedgeOrder(string originalSymbol, int originalType, double originalLots, ulong originalTicket)
  {
   // If OriginalOrder is Buy
   if(originalType == POSITION_TYPE_BUY)
     {
     if(originalSymbol =="USDJPY#")
       {
       // Send EURUSD Buy order
       SendOrder("EURUSD#", ORDER_TYPE_BUY, originalLots, originalTicket);
       // Send GBPUSD Buy order
       SendOrder("GBPUSD#", ORDER_TYPE_BUY, originalLots, originalTicket);
       // Send AUDUSD Buy order
       SendOrder("AUDUSD#", ORDER_TYPE_BUY, originalLots, originalTicket);
       // Send EURJPY Sell order
       SendOrder("EURJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="EURUSD#")
       {
       SendOrder("USDCHF#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="GBPUSD#")
       {
       SendOrder("EURGBP#", ORDER_TYPE_BUY, originalLots, originalTicket);
       SendOrder("USDJPY#", ORDER_TYPE_BUY, originalLots, originalTicket);
       SendOrder("GBPJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="EURJPY#")
       {
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURGBP#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="GBPJPY#")
       {
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURGBP#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="EURGBP#")
       {
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPUSD#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="USDCHF#")
       {
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURCHF#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="CHFJPY#")
       {
       SendOrder("USDCHF#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("USDJPY#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="USDCAD#")
       {
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURCAD#", ORDER_TYPE_BUY, originalLots, originalTicket);
       SendOrder("AUDCAD#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="CADJPY#")
       {
       SendOrder("USDCAD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("CADCHF#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="AUDUSD#")
       {
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("XAUUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="AUDJPY#")
       {
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("NZDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="NZDUSD#")
       {
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("USDCAD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("NZDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="NZDJPY#")
       {
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("NZDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("NZDCAD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="EURAUD#")
       {
       SendOrder("AUDUSD#", ORDER_TYPE_BUY, originalLots, originalTicket);
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPAUD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDJPY#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     /*
     if(originalSymbol =="EURAUD#")
       {
       // Send EURCHF Sell order
       SendOrder("EURCHF#", ORDER_TYPE_SELL, originalLots, originalTicket);
       // Send CADCHF Buy order
       SendOrder("CADCHF#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     */
     if(originalSymbol =="GBPAUD#")
       {
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDJPY#", ORDER_TYPE_BUY, originalLots, originalTicket);
       SendOrder("EURGBP#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="EURCHF#")
       {
       SendOrder("USDCHF#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("CHFJPY#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="GBPCHF#")
       {
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDUSD#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="AUDCHF#")
       {
       SendOrder("USDCHF#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURCHF#", ORDER_TYPE_BUY, originalLots, originalTicket);
       SendOrder("AUDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="CADCHF#")
       {
       SendOrder("USDCAD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("USDCHF#", ORDER_TYPE_BUY, originalLots, originalTicket);
       SendOrder("EURCAD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURCHF#", ORDER_TYPE_BUY, originalLots, originalTicket);
       }
     if(originalSymbol =="AUDNZD#")
       {
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("NZDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("NZDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="XAUUSD#")
       {
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("USDCAD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("S&P500#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     if(originalSymbol =="S&P500#")
       {
       SendOrder("USDJPY#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("EURUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("GBPUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("AUDUSD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       SendOrder("USDCAD#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     }
   // If OriginalOrder is Sell
   if(originalType == POSITION_TYPE_SELL)
     {
     if(originalSymbol =="EURAUD#")
       {
       // Send EURCHF Buy order
       SendOrder("EURCHF#", ORDER_TYPE_BUY, originalLots, originalTicket);
       // Send CADCHF Sell order
       SendOrder("CADCHF#", ORDER_TYPE_SELL, originalLots, originalTicket);
       }
     }
  }
//+------------------------------------------------------------------+
//| Send individual order                                            |
//+------------------------------------------------------------------+
void SendOrder(string originalSymbol, int originalType, double originalLots, ulong originalTicket)
  {
   double price;
   if(originalType == ORDER_TYPE_BUY)
     {
      price = SymbolInfoDouble(originalSymbol, SYMBOL_ASK);
     }
   else
     {
      price = SymbolInfoDouble(originalSymbol, SYMBOL_BID);
     }

   MqlTradeRequest request;
   MqlTradeResult result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action = TRADE_ACTION_DEAL;
   request.symbol = originalSymbol;
   request.volume = originalLots;
   request.type = originalType;
   request.price = price;
   request.deviation = 10;
   request.magic = originalTicket;  // Keep the same magic number
   request.comment = "Hedge for ticket " + IntegerToString(originalTicket);

   if(!OrderSend(request, result))
     {
      Print("Error sending hedge order for ", originalSymbol, ": ", result.retcode);
     }
  }
//+------------------------------------------------------------------+
//| Check spreads function                                           |
//+------------------------------------------------------------------+
bool CheckSpreads()
  {
   // Get the spread in points for USDJPY, EURUSD, and AUDUSD
   double spreadUSDJPY = SymbolInfoDouble("USDJPY#", SYMBOL_ASK) - SymbolInfoDouble("USDJPY#", SYMBOL_BID);
   double spreadEURUSD = SymbolInfoDouble("EURUSD#", SYMBOL_ASK) - SymbolInfoDouble("EURUSD#", SYMBOL_BID);
   double spreadAUDUSD = SymbolInfoDouble("AUDUSD#", SYMBOL_ASK) - SymbolInfoDouble("AUDUSD#", SYMBOL_BID);

   // Convert the spreads to points
   double spreadUSDJPYPoints = spreadUSDJPY * 1000; // USDJPY typically uses 3 decimal places
   double spreadEURUSDPoints = spreadEURUSD * 100000; // EURUSD typically uses 5 decimal places
   double spreadAUDUSDPoints = spreadAUDUSD * 100000; // AUDUSD typically uses 5 decimal places

   // Check if all spreads are less than 20 points
   if(spreadUSDJPYPoints < 20 && spreadEURUSDPoints < 20 && spreadAUDUSDPoints < 20)
     {
      return true;
     }
   else
     {
      Print("Spreads too high: USDJPY#: ", spreadUSDJPYPoints, " EURUSD#: ", spreadEURUSDPoints, " AUDUSD#: ", spreadAUDUSDPoints);
      return false;
     }
  }
//+------------------------------------------------------------------+
